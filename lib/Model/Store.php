<?php
/**
 * Store
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iQX Amplify API Reference
 *
 * Welcome to the iQX Amplify API reference. This is a live example of how you can use [iQX Amplify](http://app.iqxamplify.com/) to integrate your own e-commerce store or ticketing engine.  The iQX Amplify API is organized around the [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer) mothodology, and it uses resource-oriented URLs, and common HTTP response codes to indicate API errors. All requests are authenticated using an `api-key` which can be obtained from your developer dashboard within iQX Amplify.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: development@iqxcorp.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Store Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Store implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Store';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'type' => 'string',
        'url' => 'string',
        'business_name' => 'string',
        'site_url' => 'string',
        'terms_of_service' => 'string',
        'modified_date' => '\DateTime',
        'has_integration' => 'bool',
        'whitelist_email_on_purchase' => 'bool',
        'whitelist_popup_on_purchase' => 'bool'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'url' => 'url',
        'business_name' => 'business_name',
        'site_url' => 'site_url',
        'terms_of_service' => 'terms_of_service',
        'modified_date' => 'modified_date',
        'has_integration' => 'has_integration',
        'whitelist_email_on_purchase' => 'whitelist_email_on_purchase',
        'whitelist_popup_on_purchase' => 'whitelist_popup_on_purchase'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'url' => 'setUrl',
        'business_name' => 'setBusinessName',
        'site_url' => 'setSiteUrl',
        'terms_of_service' => 'setTermsOfService',
        'modified_date' => 'setModifiedDate',
        'has_integration' => 'setHasIntegration',
        'whitelist_email_on_purchase' => 'setWhitelistEmailOnPurchase',
        'whitelist_popup_on_purchase' => 'setWhitelistPopupOnPurchase'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'url' => 'getUrl',
        'business_name' => 'getBusinessName',
        'site_url' => 'getSiteUrl',
        'terms_of_service' => 'getTermsOfService',
        'modified_date' => 'getModifiedDate',
        'has_integration' => 'getHasIntegration',
        'whitelist_email_on_purchase' => 'getWhitelistEmailOnPurchase',
        'whitelist_popup_on_purchase' => 'getWhitelistPopupOnPurchase'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['business_name'] = isset($data['business_name']) ? $data['business_name'] : null;
        $this->container['site_url'] = isset($data['site_url']) ? $data['site_url'] : null;
        $this->container['terms_of_service'] = isset($data['terms_of_service']) ? $data['terms_of_service'] : null;
        $this->container['modified_date'] = isset($data['modified_date']) ? $data['modified_date'] : null;
        $this->container['has_integration'] = isset($data['has_integration']) ? $data['has_integration'] : null;
        $this->container['whitelist_email_on_purchase'] = isset($data['whitelist_email_on_purchase']) ? $data['whitelist_email_on_purchase'] : null;
        $this->container['whitelist_popup_on_purchase'] = isset($data['whitelist_popup_on_purchase']) ? $data['whitelist_popup_on_purchase'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['type'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id Primary key
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type The store type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     * @param string $url The sites domain
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets business_name
     * @return string
     */
    public function getBusinessName()
    {
        return $this->container['business_name'];
    }

    /**
     * Sets business_name
     * @param string $business_name Name of the business
     * @return $this
     */
    public function setBusinessName($business_name)
    {
        $this->container['business_name'] = $business_name;

        return $this;
    }

    /**
     * Gets site_url
     * @return string
     */
    public function getSiteUrl()
    {
        return $this->container['site_url'];
    }

    /**
     * Sets site_url
     * @param string $site_url The URL of the store
     * @return $this
     */
    public function setSiteUrl($site_url)
    {
        $this->container['site_url'] = $site_url;

        return $this;
    }

    /**
     * Gets terms_of_service
     * @return string
     */
    public function getTermsOfService()
    {
        return $this->container['terms_of_service'];
    }

    /**
     * Sets terms_of_service
     * @param string $terms_of_service The URL of the store's Terms of Service
     * @return $this
     */
    public function setTermsOfService($terms_of_service)
    {
        $this->container['terms_of_service'] = $terms_of_service;

        return $this;
    }

    /**
     * Gets modified_date
     * @return \DateTime
     */
    public function getModifiedDate()
    {
        return $this->container['modified_date'];
    }

    /**
     * Sets modified_date
     * @param \DateTime $modified_date Date last modified
     * @return $this
     */
    public function setModifiedDate($modified_date)
    {
        $this->container['modified_date'] = $modified_date;

        return $this;
    }

    /**
     * Gets has_integration
     * @return bool
     */
    public function getHasIntegration()
    {
        return $this->container['has_integration'];
    }

    /**
     * Sets has_integration
     * @param bool $has_integration Has been integrated (Will be deprecated as multiple integrations can now happen)
     * @return $this
     */
    public function setHasIntegration($has_integration)
    {
        $this->container['has_integration'] = $has_integration;

        return $this;
    }

    /**
     * Gets whitelist_email_on_purchase
     * @return bool
     */
    public function getWhitelistEmailOnPurchase()
    {
        return $this->container['whitelist_email_on_purchase'];
    }

    /**
     * Sets whitelist_email_on_purchase
     * @param bool $whitelist_email_on_purchase Send a whitelist email on the purchase
     * @return $this
     */
    public function setWhitelistEmailOnPurchase($whitelist_email_on_purchase)
    {
        $this->container['whitelist_email_on_purchase'] = $whitelist_email_on_purchase;

        return $this;
    }

    /**
     * Gets whitelist_popup_on_purchase
     * @return bool
     */
    public function getWhitelistPopupOnPurchase()
    {
        return $this->container['whitelist_popup_on_purchase'];
    }

    /**
     * Sets whitelist_popup_on_purchase
     * @param bool $whitelist_popup_on_purchase Show the whitelist screen capture
     * @return $this
     */
    public function setWhitelistPopupOnPurchase($whitelist_popup_on_purchase)
    {
        $this->container['whitelist_popup_on_purchase'] = $whitelist_popup_on_purchase;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


