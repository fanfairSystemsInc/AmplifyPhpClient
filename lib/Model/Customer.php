<?php
/**
 * Customer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iQX Amplify API Reference
 *
 * Welcome to the iQX Amplify API reference. This is a live example of how you can use [iQX Amplify](http://app.iqxamplify.com/) to integrate your own e-commerce store or ticketing engine.  The iQX Amplify API is organized around the [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer) mothodology, and it uses resource-oriented URLs, and common HTTP response codes to indicate API errors. All requests are authenticated using an `api-key` which can be obtained from your developer dashboard within iQX Amplify.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: development@iqxcorp.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Customer Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Customer implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Customer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'address1' => 'string',
        'address2' => 'string',
        'area_code' => 'string',
        'city' => 'string',
        'company' => 'string',
        'country' => 'string',
        'email' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'activation_date' => '\DateTime',
        'modified_date' => '\DateTime',
        'orders_count' => 'float',
        'phone' => 'string',
        'province' => 'string',
        'ref_id' => 'string',
        'signed_up_at' => '\DateTime',
        'time_zone_dst_offset' => 'float',
        'time_zone_id' => 'string',
        'time_zone_raw_offset' => 'float',
        'total_spent' => 'float',
        'user_id' => 'string',
        'valid_phone_number' => 'bool',
        'verified' => 'bool',
        'zip' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'address1' => 'address1',
        'address2' => 'address2',
        'area_code' => 'area_code',
        'city' => 'city',
        'company' => 'company',
        'country' => 'country',
        'email' => 'email',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'activation_date' => 'activation_date',
        'modified_date' => 'modified_date',
        'orders_count' => 'orders_count',
        'phone' => 'phone',
        'province' => 'province',
        'ref_id' => 'ref_id',
        'signed_up_at' => 'signed_up_at',
        'time_zone_dst_offset' => 'time_zone_dst_offset',
        'time_zone_id' => 'time_zone_id',
        'time_zone_raw_offset' => 'time_zone_raw_offset',
        'total_spent' => 'total_spent',
        'user_id' => 'user_id',
        'valid_phone_number' => 'valid_phone_number',
        'verified' => 'verified',
        'zip' => 'zip'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'address1' => 'setAddress1',
        'address2' => 'setAddress2',
        'area_code' => 'setAreaCode',
        'city' => 'setCity',
        'company' => 'setCompany',
        'country' => 'setCountry',
        'email' => 'setEmail',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'activation_date' => 'setActivationDate',
        'modified_date' => 'setModifiedDate',
        'orders_count' => 'setOrdersCount',
        'phone' => 'setPhone',
        'province' => 'setProvince',
        'ref_id' => 'setRefId',
        'signed_up_at' => 'setSignedUpAt',
        'time_zone_dst_offset' => 'setTimeZoneDstOffset',
        'time_zone_id' => 'setTimeZoneId',
        'time_zone_raw_offset' => 'setTimeZoneRawOffset',
        'total_spent' => 'setTotalSpent',
        'user_id' => 'setUserId',
        'valid_phone_number' => 'setValidPhoneNumber',
        'verified' => 'setVerified',
        'zip' => 'setZip'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'address1' => 'getAddress1',
        'address2' => 'getAddress2',
        'area_code' => 'getAreaCode',
        'city' => 'getCity',
        'company' => 'getCompany',
        'country' => 'getCountry',
        'email' => 'getEmail',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'activation_date' => 'getActivationDate',
        'modified_date' => 'getModifiedDate',
        'orders_count' => 'getOrdersCount',
        'phone' => 'getPhone',
        'province' => 'getProvince',
        'ref_id' => 'getRefId',
        'signed_up_at' => 'getSignedUpAt',
        'time_zone_dst_offset' => 'getTimeZoneDstOffset',
        'time_zone_id' => 'getTimeZoneId',
        'time_zone_raw_offset' => 'getTimeZoneRawOffset',
        'total_spent' => 'getTotalSpent',
        'user_id' => 'getUserId',
        'valid_phone_number' => 'getValidPhoneNumber',
        'verified' => 'getVerified',
        'zip' => 'getZip'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['address1'] = isset($data['address1']) ? $data['address1'] : null;
        $this->container['address2'] = isset($data['address2']) ? $data['address2'] : null;
        $this->container['area_code'] = isset($data['area_code']) ? $data['area_code'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['activation_date'] = isset($data['activation_date']) ? $data['activation_date'] : null;
        $this->container['modified_date'] = isset($data['modified_date']) ? $data['modified_date'] : null;
        $this->container['orders_count'] = isset($data['orders_count']) ? $data['orders_count'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['province'] = isset($data['province']) ? $data['province'] : null;
        $this->container['ref_id'] = isset($data['ref_id']) ? $data['ref_id'] : null;
        $this->container['signed_up_at'] = isset($data['signed_up_at']) ? $data['signed_up_at'] : null;
        $this->container['time_zone_dst_offset'] = isset($data['time_zone_dst_offset']) ? $data['time_zone_dst_offset'] : null;
        $this->container['time_zone_id'] = isset($data['time_zone_id']) ? $data['time_zone_id'] : null;
        $this->container['time_zone_raw_offset'] = isset($data['time_zone_raw_offset']) ? $data['time_zone_raw_offset'] : null;
        $this->container['total_spent'] = isset($data['total_spent']) ? $data['total_spent'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['valid_phone_number'] = isset($data['valid_phone_number']) ? $data['valid_phone_number'] : null;
        $this->container['verified'] = isset($data['verified']) ? $data['verified'] : null;
        $this->container['zip'] = isset($data['zip']) ? $data['zip'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id Primary key
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets address1
     * @return string
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     * @param string $address1 Address Line 1
     * @return $this
     */
    public function setAddress1($address1)
    {
        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     * @return string
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     * @param string $address2 Address Line 2
     * @return $this
     */
    public function setAddress2($address2)
    {
        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets area_code
     * @return string
     */
    public function getAreaCode()
    {
        return $this->container['area_code'];
    }

    /**
     * Sets area_code
     * @param string $area_code The Customer's Area Code
     * @return $this
     */
    public function setAreaCode($area_code)
    {
        $this->container['area_code'] = $area_code;

        return $this;
    }

    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     * @param string $city The Customer's City
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets company
     * @return string
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     * @param string $company The Customer's Company
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets country
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     * @param string $country The Customer's Country
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email The Customer's Email Address
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     * @param string $first_name The Customer's First Name
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     * @param string $last_name The Customer's Last Name
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets activation_date
     * @return \DateTime
     */
    public function getActivationDate()
    {
        return $this->container['activation_date'];
    }

    /**
     * Sets activation_date
     * @param \DateTime $activation_date Date customer was activated
     * @return $this
     */
    public function setActivationDate($activation_date)
    {
        $this->container['activation_date'] = $activation_date;

        return $this;
    }

    /**
     * Gets modified_date
     * @return \DateTime
     */
    public function getModifiedDate()
    {
        return $this->container['modified_date'];
    }

    /**
     * Sets modified_date
     * @param \DateTime $modified_date Date last modified
     * @return $this
     */
    public function setModifiedDate($modified_date)
    {
        $this->container['modified_date'] = $modified_date;

        return $this;
    }

    /**
     * Gets orders_count
     * @return float
     */
    public function getOrdersCount()
    {
        return $this->container['orders_count'];
    }

    /**
     * Sets orders_count
     * @param float $orders_count Total number of orders
     * @return $this
     */
    public function setOrdersCount($orders_count)
    {
        $this->container['orders_count'] = $orders_count;

        return $this;
    }

    /**
     * Gets phone
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     * @param string $phone The Customer's Phone Number
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets province
     * @return string
     */
    public function getProvince()
    {
        return $this->container['province'];
    }

    /**
     * Sets province
     * @param string $province The Customer's Province
     * @return $this
     */
    public function setProvince($province)
    {
        $this->container['province'] = $province;

        return $this;
    }

    /**
     * Gets ref_id
     * @return string
     */
    public function getRefId()
    {
        return $this->container['ref_id'];
    }

    /**
     * Sets ref_id
     * @param string $ref_id The Customer's external reference Id
     * @return $this
     */
    public function setRefId($ref_id)
    {
        $this->container['ref_id'] = $ref_id;

        return $this;
    }

    /**
     * Gets signed_up_at
     * @return \DateTime
     */
    public function getSignedUpAt()
    {
        return $this->container['signed_up_at'];
    }

    /**
     * Sets signed_up_at
     * @param \DateTime $signed_up_at The date that the Customer signed up
     * @return $this
     */
    public function setSignedUpAt($signed_up_at)
    {
        $this->container['signed_up_at'] = $signed_up_at;

        return $this;
    }

    /**
     * Gets time_zone_dst_offset
     * @return float
     */
    public function getTimeZoneDstOffset()
    {
        return $this->container['time_zone_dst_offset'];
    }

    /**
     * Sets time_zone_dst_offset
     * @param float $time_zone_dst_offset The Customer's DST Timezone offset
     * @return $this
     */
    public function setTimeZoneDstOffset($time_zone_dst_offset)
    {
        $this->container['time_zone_dst_offset'] = $time_zone_dst_offset;

        return $this;
    }

    /**
     * Gets time_zone_id
     * @return string
     */
    public function getTimeZoneId()
    {
        return $this->container['time_zone_id'];
    }

    /**
     * Sets time_zone_id
     * @param string $time_zone_id The customer's Timezone
     * @return $this
     */
    public function setTimeZoneId($time_zone_id)
    {
        $this->container['time_zone_id'] = $time_zone_id;

        return $this;
    }

    /**
     * Gets time_zone_raw_offset
     * @return float
     */
    public function getTimeZoneRawOffset()
    {
        return $this->container['time_zone_raw_offset'];
    }

    /**
     * Sets time_zone_raw_offset
     * @param float $time_zone_raw_offset The Customer's Timezone offset
     * @return $this
     */
    public function setTimeZoneRawOffset($time_zone_raw_offset)
    {
        $this->container['time_zone_raw_offset'] = $time_zone_raw_offset;

        return $this;
    }

    /**
     * Gets total_spent
     * @return float
     */
    public function getTotalSpent()
    {
        return $this->container['total_spent'];
    }

    /**
     * Sets total_spent
     * @param float $total_spent Customer's total spend to date
     * @return $this
     */
    public function setTotalSpent($total_spent)
    {
        $this->container['total_spent'] = $total_spent;

        return $this;
    }

    /**
     * Gets user_id
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     * @param string $user_id Connected user id
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets valid_phone_number
     * @return bool
     */
    public function getValidPhoneNumber()
    {
        return $this->container['valid_phone_number'];
    }

    /**
     * Sets valid_phone_number
     * @param bool $valid_phone_number The Customer has a valid phone number
     * @return $this
     */
    public function setValidPhoneNumber($valid_phone_number)
    {
        $this->container['valid_phone_number'] = $valid_phone_number;

        return $this;
    }

    /**
     * Gets verified
     * @return bool
     */
    public function getVerified()
    {
        return $this->container['verified'];
    }

    /**
     * Sets verified
     * @param bool $verified The Customer has been validated and whitelisted
     * @return $this
     */
    public function setVerified($verified)
    {
        $this->container['verified'] = $verified;

        return $this;
    }

    /**
     * Gets zip
     * @return string
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     * @param string $zip The customer's Zipcode
     * @return $this
     */
    public function setZip($zip)
    {
        $this->container['zip'] = $zip;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


