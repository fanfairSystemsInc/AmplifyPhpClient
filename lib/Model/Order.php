<?php
/**
 * Order
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iQX Amplify API Reference
 *
 * Welcome to the iQX Amplify API reference. This is a live example of how you can use [iQX Amplify](http://app.iqxamplify.com/) to integrate your own e-commerce store or ticketing engine.  The iQX Amplify API is organized around the [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer) mothodology, and it uses resource-oriented URLs, and common HTTP response codes to indicate API errors. All requests are authenticated using an `api-key` which can be obtained from your developer dashboard within iQX Amplify.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: development@iqxcorp.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Order Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Order implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'contact_ref_id' => 'string',
        'financial_status' => 'string',
        'iqx_order' => 'string',
        'line_items' => '\Swagger\Client\Model\OrderLineItems[]',
        'processed_at' => '\DateTime',
        'ref_id' => 'string',
        'subtotal_price' => 'float',
        'total_price' => 'float',
        'total_shipping' => 'float',
        'total_tax' => 'float',
        'user_id' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'contact_ref_id' => 'contact_ref_id',
        'financial_status' => 'financial_status',
        'iqx_order' => 'iqx_order',
        'line_items' => 'line_items',
        'processed_at' => 'processed_at',
        'ref_id' => 'ref_id',
        'subtotal_price' => 'subtotal_price',
        'total_price' => 'total_price',
        'total_shipping' => 'total_shipping',
        'total_tax' => 'total_tax',
        'user_id' => 'user_id'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'contact_ref_id' => 'setContactRefId',
        'financial_status' => 'setFinancialStatus',
        'iqx_order' => 'setIqxOrder',
        'line_items' => 'setLineItems',
        'processed_at' => 'setProcessedAt',
        'ref_id' => 'setRefId',
        'subtotal_price' => 'setSubtotalPrice',
        'total_price' => 'setTotalPrice',
        'total_shipping' => 'setTotalShipping',
        'total_tax' => 'setTotalTax',
        'user_id' => 'setUserId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'contact_ref_id' => 'getContactRefId',
        'financial_status' => 'getFinancialStatus',
        'iqx_order' => 'getIqxOrder',
        'line_items' => 'getLineItems',
        'processed_at' => 'getProcessedAt',
        'ref_id' => 'getRefId',
        'subtotal_price' => 'getSubtotalPrice',
        'total_price' => 'getTotalPrice',
        'total_shipping' => 'getTotalShipping',
        'total_tax' => 'getTotalTax',
        'user_id' => 'getUserId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['contact_ref_id'] = isset($data['contact_ref_id']) ? $data['contact_ref_id'] : null;
        $this->container['financial_status'] = isset($data['financial_status']) ? $data['financial_status'] : null;
        $this->container['iqx_order'] = isset($data['iqx_order']) ? $data['iqx_order'] : null;
        $this->container['line_items'] = isset($data['line_items']) ? $data['line_items'] : null;
        $this->container['processed_at'] = isset($data['processed_at']) ? $data['processed_at'] : null;
        $this->container['ref_id'] = isset($data['ref_id']) ? $data['ref_id'] : null;
        $this->container['subtotal_price'] = isset($data['subtotal_price']) ? $data['subtotal_price'] : null;
        $this->container['total_price'] = isset($data['total_price']) ? $data['total_price'] : null;
        $this->container['total_shipping'] = isset($data['total_shipping']) ? $data['total_shipping'] : null;
        $this->container['total_tax'] = isset($data['total_tax']) ? $data['total_tax'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id Primary key
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets contact_ref_id
     * @return string
     */
    public function getContactRefId()
    {
        return $this->container['contact_ref_id'];
    }

    /**
     * Sets contact_ref_id
     * @param string $contact_ref_id Contact reference id
     * @return $this
     */
    public function setContactRefId($contact_ref_id)
    {
        $this->container['contact_ref_id'] = $contact_ref_id;

        return $this;
    }

    /**
     * Gets financial_status
     * @return string
     */
    public function getFinancialStatus()
    {
        return $this->container['financial_status'];
    }

    /**
     * Sets financial_status
     * @param string $financial_status Financial status of the order
     * @return $this
     */
    public function setFinancialStatus($financial_status)
    {
        $this->container['financial_status'] = $financial_status;

        return $this;
    }

    /**
     * Gets iqx_order
     * @return string
     */
    public function getIqxOrder()
    {
        return $this->container['iqx_order'];
    }

    /**
     * Sets iqx_order
     * @param string $iqx_order iqx internal order id
     * @return $this
     */
    public function setIqxOrder($iqx_order)
    {
        $this->container['iqx_order'] = $iqx_order;

        return $this;
    }

    /**
     * Gets line_items
     * @return \Swagger\Client\Model\OrderLineItems[]
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     * @param \Swagger\Client\Model\OrderLineItems[] $line_items The individual line items of the order
     * @return $this
     */
    public function setLineItems($line_items)
    {
        $this->container['line_items'] = $line_items;

        return $this;
    }

    /**
     * Gets processed_at
     * @return \DateTime
     */
    public function getProcessedAt()
    {
        return $this->container['processed_at'];
    }

    /**
     * Sets processed_at
     * @param \DateTime $processed_at The Order was processed at
     * @return $this
     */
    public function setProcessedAt($processed_at)
    {
        $this->container['processed_at'] = $processed_at;

        return $this;
    }

    /**
     * Gets ref_id
     * @return string
     */
    public function getRefId()
    {
        return $this->container['ref_id'];
    }

    /**
     * Sets ref_id
     * @param string $ref_id The Order reference number
     * @return $this
     */
    public function setRefId($ref_id)
    {
        $this->container['ref_id'] = $ref_id;

        return $this;
    }

    /**
     * Gets subtotal_price
     * @return float
     */
    public function getSubtotalPrice()
    {
        return $this->container['subtotal_price'];
    }

    /**
     * Sets subtotal_price
     * @param float $subtotal_price The Order's sub total
     * @return $this
     */
    public function setSubtotalPrice($subtotal_price)
    {
        $this->container['subtotal_price'] = $subtotal_price;

        return $this;
    }

    /**
     * Gets total_price
     * @return float
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     * @param float $total_price The Order's total
     * @return $this
     */
    public function setTotalPrice($total_price)
    {
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets total_shipping
     * @return float
     */
    public function getTotalShipping()
    {
        return $this->container['total_shipping'];
    }

    /**
     * Sets total_shipping
     * @param float $total_shipping The Order's shipping cost
     * @return $this
     */
    public function setTotalShipping($total_shipping)
    {
        $this->container['total_shipping'] = $total_shipping;

        return $this;
    }

    /**
     * Gets total_tax
     * @return float
     */
    public function getTotalTax()
    {
        return $this->container['total_tax'];
    }

    /**
     * Sets total_tax
     * @param float $total_tax The Order's tax amount
     * @return $this
     */
    public function setTotalTax($total_tax)
    {
        $this->container['total_tax'] = $total_tax;

        return $this;
    }

    /**
     * Gets user_id
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     * @param string $user_id Connected user id
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


