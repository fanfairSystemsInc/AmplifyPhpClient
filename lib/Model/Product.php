<?php
/**
 * Product
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * iQX Amplify API Reference
 *
 * Welcome to the iQX Amplify API reference. This is a live example of how you can use [iQX Amplify](http://app.iqxamplify.com/) to integrate your own e-commerce store or ticketing engine.  The iQX Amplify API is organized around the [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer) mothodology, and it uses resource-oriented URLs, and common HTTP response codes to indicate API errors. All requests are authenticated using an `api-key` which can be obtained from your developer dashboard within iQX Amplify.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: development@iqxcorp.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Product Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Product implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'categories' => 'string',
        'currency' => 'string',
        'handle' => 'string',
        'image_source_url' => 'string',
        'image_thubnail' => 'string',
        'is_downloadable' => 'bool',
        'is_virtual' => 'bool',
        'keyword_locked' => 'bool',
        'out_stock' => 'bool',
        'price' => 'float',
        'price_compare' => 'float',
        'product_tags' => 'string[]',
        'published_at' => '\DateTime',
        'ref_id' => 'string',
        'sku' => 'string',
        'source' => 'string',
        'tags' => 'string',
        'title' => 'string',
        'type' => 'string',
        'user_id' => 'string',
        'variants' => '\Swagger\Client\Model\ProductVariants[]',
        'vendor' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'categories' => 'categories',
        'currency' => 'currency',
        'handle' => 'handle',
        'image_source_url' => 'image_source_url',
        'image_thubnail' => 'image_thubnail',
        'is_downloadable' => 'is_downloadable',
        'is_virtual' => 'is_virtual',
        'keyword_locked' => 'keyword_locked',
        'out_stock' => 'out_stock',
        'price' => 'price',
        'price_compare' => 'price_compare',
        'product_tags' => 'product_tags',
        'published_at' => 'published_at',
        'ref_id' => 'ref_id',
        'sku' => 'sku',
        'source' => 'source',
        'tags' => 'tags',
        'title' => 'title',
        'type' => 'type',
        'user_id' => 'user_id',
        'variants' => 'variants',
        'vendor' => 'vendor'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'categories' => 'setCategories',
        'currency' => 'setCurrency',
        'handle' => 'setHandle',
        'image_source_url' => 'setImageSourceUrl',
        'image_thubnail' => 'setImageThubnail',
        'is_downloadable' => 'setIsDownloadable',
        'is_virtual' => 'setIsVirtual',
        'keyword_locked' => 'setKeywordLocked',
        'out_stock' => 'setOutStock',
        'price' => 'setPrice',
        'price_compare' => 'setPriceCompare',
        'product_tags' => 'setProductTags',
        'published_at' => 'setPublishedAt',
        'ref_id' => 'setRefId',
        'sku' => 'setSku',
        'source' => 'setSource',
        'tags' => 'setTags',
        'title' => 'setTitle',
        'type' => 'setType',
        'user_id' => 'setUserId',
        'variants' => 'setVariants',
        'vendor' => 'setVendor'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'categories' => 'getCategories',
        'currency' => 'getCurrency',
        'handle' => 'getHandle',
        'image_source_url' => 'getImageSourceUrl',
        'image_thubnail' => 'getImageThubnail',
        'is_downloadable' => 'getIsDownloadable',
        'is_virtual' => 'getIsVirtual',
        'keyword_locked' => 'getKeywordLocked',
        'out_stock' => 'getOutStock',
        'price' => 'getPrice',
        'price_compare' => 'getPriceCompare',
        'product_tags' => 'getProductTags',
        'published_at' => 'getPublishedAt',
        'ref_id' => 'getRefId',
        'sku' => 'getSku',
        'source' => 'getSource',
        'tags' => 'getTags',
        'title' => 'getTitle',
        'type' => 'getType',
        'user_id' => 'getUserId',
        'variants' => 'getVariants',
        'vendor' => 'getVendor'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['handle'] = isset($data['handle']) ? $data['handle'] : null;
        $this->container['image_source_url'] = isset($data['image_source_url']) ? $data['image_source_url'] : null;
        $this->container['image_thubnail'] = isset($data['image_thubnail']) ? $data['image_thubnail'] : null;
        $this->container['is_downloadable'] = isset($data['is_downloadable']) ? $data['is_downloadable'] : null;
        $this->container['is_virtual'] = isset($data['is_virtual']) ? $data['is_virtual'] : null;
        $this->container['keyword_locked'] = isset($data['keyword_locked']) ? $data['keyword_locked'] : null;
        $this->container['out_stock'] = isset($data['out_stock']) ? $data['out_stock'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['price_compare'] = isset($data['price_compare']) ? $data['price_compare'] : null;
        $this->container['product_tags'] = isset($data['product_tags']) ? $data['product_tags'] : null;
        $this->container['published_at'] = isset($data['published_at']) ? $data['published_at'] : null;
        $this->container['ref_id'] = isset($data['ref_id']) ? $data['ref_id'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['variants'] = isset($data['variants']) ? $data['variants'] : null;
        $this->container['vendor'] = isset($data['vendor']) ? $data['vendor'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id Primary key
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets categories
     * @return string
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     * @param string $categories Comma seperated string of the product categories
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param string $currency The currency the product is listed in
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets handle
     * @return string
     */
    public function getHandle()
    {
        return $this->container['handle'];
    }

    /**
     * Sets handle
     * @param string $handle The full URL to the product on the store
     * @return $this
     */
    public function setHandle($handle)
    {
        $this->container['handle'] = $handle;

        return $this;
    }

    /**
     * Gets image_source_url
     * @return string
     */
    public function getImageSourceUrl()
    {
        return $this->container['image_source_url'];
    }

    /**
     * Sets image_source_url
     * @param string $image_source_url The URL to the Product's image
     * @return $this
     */
    public function setImageSourceUrl($image_source_url)
    {
        $this->container['image_source_url'] = $image_source_url;

        return $this;
    }

    /**
     * Gets image_thubnail
     * @return string
     */
    public function getImageThubnail()
    {
        return $this->container['image_thubnail'];
    }

    /**
     * Sets image_thubnail
     * @param string $image_thubnail The URL to the Product's thumbnail
     * @return $this
     */
    public function setImageThubnail($image_thubnail)
    {
        $this->container['image_thubnail'] = $image_thubnail;

        return $this;
    }

    /**
     * Gets is_downloadable
     * @return bool
     */
    public function getIsDownloadable()
    {
        return $this->container['is_downloadable'];
    }

    /**
     * Sets is_downloadable
     * @param bool $is_downloadable If the product is downloadable
     * @return $this
     */
    public function setIsDownloadable($is_downloadable)
    {
        $this->container['is_downloadable'] = $is_downloadable;

        return $this;
    }

    /**
     * Gets is_virtual
     * @return bool
     */
    public function getIsVirtual()
    {
        return $this->container['is_virtual'];
    }

    /**
     * Sets is_virtual
     * @param bool $is_virtual If the Product is virtual
     * @return $this
     */
    public function setIsVirtual($is_virtual)
    {
        $this->container['is_virtual'] = $is_virtual;

        return $this;
    }

    /**
     * Gets keyword_locked
     * @return bool
     */
    public function getKeywordLocked()
    {
        return $this->container['keyword_locked'];
    }

    /**
     * Sets keyword_locked
     * @param bool $keyword_locked If the product has had a keyword set against it
     * @return $this
     */
    public function setKeywordLocked($keyword_locked)
    {
        $this->container['keyword_locked'] = $keyword_locked;

        return $this;
    }

    /**
     * Gets out_stock
     * @return bool
     */
    public function getOutStock()
    {
        return $this->container['out_stock'];
    }

    /**
     * Sets out_stock
     * @param bool $out_stock If the product is out of stock
     * @return $this
     */
    public function setOutStock($out_stock)
    {
        $this->container['out_stock'] = $out_stock;

        return $this;
    }

    /**
     * Gets price
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     * @param float $price The price of the product
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets price_compare
     * @return float
     */
    public function getPriceCompare()
    {
        return $this->container['price_compare'];
    }

    /**
     * Sets price_compare
     * @param float $price_compare The price compare for sale items
     * @return $this
     */
    public function setPriceCompare($price_compare)
    {
        $this->container['price_compare'] = $price_compare;

        return $this;
    }

    /**
     * Gets product_tags
     * @return string[]
     */
    public function getProductTags()
    {
        return $this->container['product_tags'];
    }

    /**
     * Sets product_tags
     * @param string[] $product_tags Array of the product tags
     * @return $this
     */
    public function setProductTags($product_tags)
    {
        $this->container['product_tags'] = $product_tags;

        return $this;
    }

    /**
     * Gets published_at
     * @return \DateTime
     */
    public function getPublishedAt()
    {
        return $this->container['published_at'];
    }

    /**
     * Sets published_at
     * @param \DateTime $published_at The date the product was published
     * @return $this
     */
    public function setPublishedAt($published_at)
    {
        $this->container['published_at'] = $published_at;

        return $this;
    }

    /**
     * Gets ref_id
     * @return string
     */
    public function getRefId()
    {
        return $this->container['ref_id'];
    }

    /**
     * Sets ref_id
     * @param string $ref_id The Products's external reference Id
     * @return $this
     */
    public function setRefId($ref_id)
    {
        $this->container['ref_id'] = $ref_id;

        return $this;
    }

    /**
     * Gets sku
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     * @param string $sku Product's sku
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets source
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     * @param string $source The Product's integration source
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets tags
     * @return string
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     * @param string $tags Comma delimited string of tags
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param string $title The product title
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type If the product is a simple or variable type product
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets user_id
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     * @param string $user_id Connected user id
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets variants
     * @return \Swagger\Client\Model\ProductVariants[]
     */
    public function getVariants()
    {
        return $this->container['variants'];
    }

    /**
     * Sets variants
     * @param \Swagger\Client\Model\ProductVariants[] $variants Array of product variants
     * @return $this
     */
    public function setVariants($variants)
    {
        $this->container['variants'] = $variants;

        return $this;
    }

    /**
     * Gets vendor
     * @return string
     */
    public function getVendor()
    {
        return $this->container['vendor'];
    }

    /**
     * Sets vendor
     * @param string $vendor The vendor connected to the Product
     * @return $this
     */
    public function setVendor($vendor)
    {
        $this->container['vendor'] = $vendor;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


